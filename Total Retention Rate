### Create two identical tables 
  SELECT
    o.Customer_ID,
    o.Order_Time
  FROM
    `keepcalmqueryon.mina.order_detail` as o
  LEFT JOIN `mina.products` as p 
  ON o.SKU = p.SKU;
  
###Join the two tables with the same customer_id AND table 1 date (Order_Time_1) < table 2 date (Order_Time_2) 
  SELECT
    r1.Customer_ID,
    r1.Order_Time AS date1,
    r2.Order_Time AS date2
  FROM
    `keepcalmqueryon.mina.retention1` AS r1
  LEFT JOIN
    `keepcalmqueryon.mina.retention2` AS r2
  ON
    r1.Customer_ID = r2.Customer_ID
    AND r1.Order_Time < r2.Order_Time;

### Create return count (rolling base). 
# return_count is when date2 is between date1 and date1 +30 days. 
# unique_return_cohort is the distinct case (meaning per customer id) of the return_cohort

  SELECT
    j.Customer_ID,
    j.date1,
    COUNT(CASE
        WHEN date2 BETWEEN date1 AND DATE_ADD(j.date1, INTERVAL 30 DAY) THEN j.Customer_ID
      ELSE
      NULL
    END) AS return_count,
    COUNT(DISTINCT
      CASE
        WHEN j.date2 BETWEEN j.date1 AND DATE_ADD(j.date1, INTERVAL 30 DAY) THEN j.Customer_ID
      ELSE
      NULL
    END
      ) AS unique_return_count
  FROM
    `keepcalmqueryon.mina.join_table` AS j
  GROUP BY
    j.Customer_ID,
    j.date1;

###Sum up the total unique return cohort by month and distinct Customer ID
# Total_cohort is total customers
# Cohort_return is the number of distinct customers who came back within 30 days 

SELECT
  DATE_TRUNC(date1, month) as monthly,
  COUNT(DISTINCT rf.Customer_ID) as total_cohort,
  COUNT(DISTINCT
    CASE
      WHEN rf.return_unique_count = 1 THEN rf.Customer_ID
    ELSE
    NULL
  END
    ) as cohort_return
FROM
  `mina.rfinaltable` AS rf
GROUP BY monthly
ORDER BY monthly;

### final count 
SELECT mr.monthly,mr.total_cohort, mr.cohort_return, mr.cohort_return/mr.total_cohort as retention_rate
FROM `keepcalmqueryon.mina.monthly_retention` as mr
ORDER BY monthly; 





